package component

import (
    "github.com/jimtrung/go-nexus/templates/layout"
)

type ResetPasswordProps struct {
    Token string
}

templ ResetPassword(props ResetPasswordProps) {
    @layout.Base("Reset Password") {
        @Navbar(nil)

        <div class="min-h-screen pt-28 pb-20 flex flex-col items-center bg-gray-50">
            <div class="w-full max-w-md px-6">
                <div class="text-center mb-10">
                    <h1 class="text-3xl font-bold text-[#1a2038] mb-2">Reset Password</h1>
                    <p class="text-gray-600">Enter your new password below</p>
                </div>

                <div class="bg-white rounded-xl shadow-md p-8">
                    @MessageContainer()

                    <form 
                        hx-post="/auth/reset-password" 
                        hx-ext="json-enc"
                        hx-target="#message-container"
                        hx-swap="innerHTML"
                    >
                        <div class="space-y-6">
                            <input 
                                type="hidden" 
                                name="token" 
                                value={ props.Token }
                            />
                            
                            @FormInput("New Password", "password", "password", "password", "••••••••", true)
                            <p class="mt-1 text-xs text-gray-500">Password must be at least 8 characters long</p>

                            @FormInput("Confirm New Password", "confirm_password", "confirm_password", "password", "••••••••", true)

                            @SubmitButton("Reset Password")
                        </div>
                    </form>

                    @BackToLogin()
                </div>
            </div>
        </div>

        <script>
            document.body.addEventListener('htmx:afterRequest', function(evt) {
                const container = document.getElementById('message-container');
                const successMsg = document.getElementById('success-message');
                const errorMsg = document.getElementById('error-message');
                
                container.classList.remove('hidden');
                
                try {
                    const response = JSON.parse(evt.detail.xhr.response);
                    
                    if (evt.detail.successful) {
                        successMsg.textContent = response.message;
                        successMsg.classList.remove('hidden');
                        errorMsg.classList.add('hidden');
                    } else {
                        errorMsg.textContent = response.error;
                        errorMsg.classList.remove('hidden');
                        successMsg.classList.add('hidden');
                    }
                } catch (e) {
                    errorMsg.textContent = "An unexpected error occurred";
                    errorMsg.classList.remove('hidden');
                    successMsg.classList.add('hidden');
                }
            });
        </script>
    }
} 